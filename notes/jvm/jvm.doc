java 内存结构
java源文件(XXX.java )经过编译器编译之后变成 字节码文件(XXX.class），字节码文件经过类加载子系统加载到内存中，加载完毕之后，交由JVM执行引擎执行。在整个程序执行过程中，JVM会用一段空间来存储程序执行期间需要用到的数据和相关信息，这段空间一般被称作为Runtime Data Area（运行时数据区），也就是我们常说的JVM内存。因此，在Java中我们常常说到的内存管理就是针对这段空间进行管理（如何分配和回收内存空间）。

对象实例化的方式
1. 使用new创建对象
2. 使用Class类的newInstance方法
3. 使用Constructor类的newInstance方法
4. 采用clone
5. 使用反序列化的方式
创建对象的步骤


对象的内存布局

内存布局实例：

对象的引用
强引用（StrongReference）：最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似于"Object obj = new Object()"这种引用关系。无论在什么情况下，只要强引用关系还在，垃圾收集器就永远不会回收掉被引用的对象。
软引用(SoftReference)：在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。
弱引用(WeakReference)：被弱引用关联的对象只能生存到下一次垃圾回收之前。无论内存空间是否充足，都会被回收掉。
虚引用(phantomReference)：一个对象是否有虚引用存在，完全不会对其生命周期构成影响，也无法通过虚引用来获得一个对象的实例。为一个对象设置虚引用的唯一目的就是能在这个对象进行垃圾回收时收到一个通知。
